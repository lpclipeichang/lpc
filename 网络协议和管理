# 网络协议和管理

### 拓扑结构
拓扑结构分为总线拓扑，环状拓扑和星型拓扑 

逻辑拓扑  
逻辑拓扑描述了信息在网络中流动的方式  

总线拓扑  
所有设备均可接收信号 

星型拓扑  
通过中心点传输  
单一故障点  

扩展星型拓扑  
比星型拓扑的复原能力更强

环状拓扑  
信号绕环传输  
单一故障点  

双环拓扑  
信号沿相反方向传输  
比单环的复原能力更强

全网状拓扑  
容错能力强  
实施成本高

部分网状拓扑  
在容错能力与成本之间寻求平衡

### 网络模型分层
1.七层
>应用层 (Application):

网络服务与最终用户的一个接口。

协议有:HTTP FTP TFTP SMTP SNMP DNS

>表示层(Presentation Layer):

数据的表示、安全、压缩。(在五层模型里面已经合并到了应用层)

格式有，JPEG、ASCll、DECOIC、加密格式等

>会话层(Session Layer):

建立、管理、终止会话。(在五层模型里面已经合并到了应用层)

对应主机进程，指本地主机与远程主机正在进行的会话

>传输层 (Transport):

定义传输数据的协议端口号，以及流控和差错效验。

协议有:TCP UDP，数据包一旦离开网卡即进入网络传输层

>网络层 (Network):

进行逻辑地址寻址，实现不同网络之间的路径选择。

协议有:ICMP IGMP IP(IPV4 IPV6) ARP RARP

>数据链路层 (Link):

建立逻辑连接、进行硬件地址寻址、差错效验等功能。(由底层网络定义协议)

将比特组合成字节进而组合成帧，用MAC地址访问介质，错误发现但不能纠正。

>物理层(Physical Layer):

建立、维护、断开物理连接。(由底层网络定义协议)

all people seem to need process data

application  
persention   
session  
transport  
network  
data link  
physical   


### Hub集线器

Hub：多端口中继器 
Hub并不记忆该信息包是由哪个MAC地址发出，哪个MAC地址在Hub的哪个端口 

Hub的特点：  
共享带宽  
半双工  

冲突域：一个主机发送报文，另一主机也发送报文，产生冲突，两个主机在一个冲突域  
广播域：一个主机发送广播，另一主机收到，两个主机在一个广播域

Hub和交换机  
集线器属于OSI的第一层物理层设备，而网桥属于OSI的第二层数据链路层设备  
从工作方式来看，集线器是一种广播模式，所有端口在一个冲突域里面。网桥的可以通过端口隔离冲突  
Hub是所有共享总线和共享带宽。网桥每个端口占一个带宽  
### 以太网桥

交换式以太网的优势  
• 扩展了网络带宽    
• 分割了网络冲突域，使网络冲突被限制在最小的范围内   
• 交换机作为更加智能的交换设备，能够提供更多用户所要求的功能：优先级、虚拟网、远程检测……  

以太网的工作原理：

以太网桥监听数据帧中源MAC地址，学习MAC，建立MAC表
对于未知MAC地址，网桥将转发到除接收该帧的端口之外的所有端口  
当网桥接到一个数据帧时，如果该帧的目的位于接收端口所在网段上，它就过滤掉该数据帧；如果目的MAC地址在位于另外一个端口，网桥就将该帧转发到该端口  
当网桥接到广播帧时候，它立即转发到除接收端口之外的所有其他端口  

### 路由器

为了实现路由,路由器需要做下列事情:

分隔广播域  
选择路由表中到达目标最好的路径  
维护和检查路由信息  
连接广域网  

路由器

路由：把一个数据包从一个设备发送到不同网络里的另一个设备上去。这些工作依靠路由器来完成。路由器只关心网络的状态和决定网络中的最佳路径。  
路由的实现依靠路由器中的路由表来完成

### TCP/IP
Transmission Control Protocol/Internet Protocol
传输控制协议/因特网互联协议  
TCP/IP是一个Protocol Stack，包括TCP、IP、UDP、
ICMP、RIP、TELNET、FTP、SMTP、ARP等许多协议  
最早发源于美国国防部（缩写为DoD）的因特网的前身
ARPA网项目，1983年1月1日，TCP/IP取代了旧的网络
控制协议NCP，成为今天的互联网和局域网的基石和标
准,由互联网工程任务组负责维护  
共定义了四层  
和ISO参考模型的分层有对应关系  

第一层:网络访问层  
　　包括用于协作IP数据在已有网络介质上传输的协议。实际上TCP/IP标准并不定义与ISO数据链路层和物理层相对应的功能。相反，它定义像地址解析协议(Address Resolution Protocol,ARP)这样的协议，提供TCP/IP协议的数据结构和实际物理硬件之间的接口。  

　　第二层:Internet层  
　　对应于OSI七层参考模型的网络层。本层包含IP协议、RIP协议(Routing Information Protocol，路由信息协议)，负责数据的包装、寻址和路由。同时还包含网间控制报文协议(Internet Control Message Protocol,ICMP)用来提供网络诊断信息。

　　第三层:传输层   
　　对应于OSI七层参考模型的传输层，它提供两种端到端的通信服务。其中TCP协议(Transmission Control Protocol)提供可靠的数据流运输服务，UDP协议(Use Datagram Protocol)提供不可靠的用户数据报服务。

　　第四层:应用层  
　　对应于OSI七层参考模型的应用层和表达层。因特网的应用层协议包括Finger、Whois、FTP(文件传输协议)、Gopher、HTTP(超文本传输协议)、Telent(远程终端协议)、SMTP(简单邮件传送协议)、IRC(因特网中继会话)、NNTP（网络新闻传输协议）等。

TCP特性  
工作在传输层  
面向连接协议  
全双工协议  
半关闭  
错误检查  
将数据打包成段，排序  
确认机制  
数据恢复，重传  
流量控制，滑动窗口  
拥塞控制，慢启动和拥塞避免算法  

#### TCP包头

源端口、目标端口：计算机上的进程要和其他进程通信是要通过计算机端口的，而一个计算机端口某个时刻只能被一个进程占用，所以通过指定源端口和目标端口，就可以知道是哪两个进程需要通信。源端口、目标端口是用16位表示的，
可推算计算机的端口个数为2^16个  


http tcp 80 https tcp 443  ssh tcp 22 ftp 21 QQ :udp 8000 dhcp 67,68 snmp 161 
mysql tcp   3306  
oracle tcp  1521   
sql server  1433   
kerberos    88/tcp    
smtp   25   
pop3   110  
imap   143   
smb    445

序列号：表示本报文段所发送数据的第一个字节的编号。在TCP连接中所传送的字节流的每一个字节都会按顺序编号。由于序列号由32位表示，所以每2^32个字节，就会出现序列号回绕，再次从 0 开始  
确认号：表示接收方期望收到发送方下一个报文段的第一个字节数据的编号。也就是告诉发送方：我希望你（指发送方）下次发送的数据的第一个字节数据的编号为此确认号    
数据偏移：表示TCP报文段的首部长度，共4位，由于TCP首部包含一个长度可变的选项部分，需要指定这个TCP报文段到底有多长。它指出 TCP 报文段的数
据起始处距离 TCP 报文段的起始处有多远。该字段的单位是32位(即4个字节为计算单位），4位二进制最大表示15，所以数据偏移也就是TCP首部最大60字节  

URG：表示本报文段中发送的数据是否包含紧急数据。后面的紧急指针字段（urgentpointer）只有当URG=1时才有效  
ACK：表示是否前面确认号字段是否有效。只有当ACK=1时，前面的确认号字段才有效。  
TCP规定，连接建立后，ACK必须为1,带ACK标志的TCP报文段称为确认报文段  
PSH：提示接收端应用程序应该立即从TCP接收缓冲区中读走数据，为接收后续数据腾出空间。如果为1，则表示对方应当立即把数据提交给上层应用，而不是缓存起来，如果应用程序不将接收到的数据读走，就会一直停留在TCP接收缓冲区中   
RST：如果收到一个RST=1的报文，说明与主机的连接出现了严重错误（如主机崩溃），必须释放连接，然后再重新建立连接。或者说明上次发送给主机的数据有问题，主机拒绝响应，带RST标志的TCP报文段称为复位报文段  
SYN：在建立连接时使用，用来同步序号。当SYN=1，ACK=0时，表示这是一个请求建立连接的报文段；当SYN=1，ACK=1时，表示对方同意建立连接。SYN=1，说明这是一个请求建立连接或同意建立连接的报文。只有在前两次握手中SYN才置为1，带SYN标志的TCP报文段称为同步报文段  
FIN：表示通知对方本端要关闭连接了，标记数据是否发送完毕。如果FIN=1，即告诉对方：“我的数据已经发送完毕，你可以释放连接了”，带FIN标志的TCP报文段称为结束报文段  

窗口大小：表示现在允许对方发送的数据量，也就是告诉对方，从本报文段的确认号开始允许对方发送的数据量，达到此值，需要ACK确认后才能再继续传送后面数据，由Window size value * Window size scaling factor
（此值在三次握手阶段TCP选项Window scale协商得到）得出此值  
校验和：提供额外的可靠性  
紧急指针：标记紧急数据在数据字段中的位置  
选项部分：其最大长度可根据TCP首部长度进行推算。TCP首部长度用4位表示，选项部分最长为：(2^4-1)*4-20=40字节    
常见选项：
最大报文段长度：Maxium Segment Size，MSS，通常1460字节  
窗口扩大：Window Scale    
时间戳： Timestamps   

TCP包头选项

1 最大报文段长度MSS（Maximum Segment Size）  
指明自己期望对方发送TCP报文段时那个数据字段的长度。比如：1460字节。数据字段的长度加上TCP首部的长度才等于整个TCP报文段的长度。MSS不宜设的太大也不宜设的太小。若选择太小，极端情况下，TCP报文段只含有1字节数据，在IP层传输的数据报的开销至少有40字节（包括TCP报文段的首部和IP数据报的首部）。这样，网络的利用率就不会超过1/41。若TCP报文段非常长，那么在IP层传输时就有可能要分解成多个短数据报片。在终点要把收到的各个短数据报片装配成原来的TCP报文段。当传输出错时还要进行重传，这些也都会使开销增大。因此MSS应尽可能大，只要在IP层传输时不需要再分片就行。在连接建立过程中，双
方都把自己能够支持的MSS写入这一字段。 MSS只出现在SYN报文中。即：MSS出现在SYN=1的报文段中    
MTU和MSS值的关系：MTU=MSS+IP Header+TCP Header  
通信双方最终的MSS值=较小MTU-IP Header-TCP Header

2 窗口扩大  
为了扩大窗口，由于TCP首部的窗口大小字段长度是16位，所以其表示的最大数是65535。但是随着时延和带宽比较大的通信产生（如卫星通信），需要更大的窗口来满足性能和吞吐率，所以产生了这个窗口扩大选项  

3 时间戳  
可以用来计算RTT(往返时间)，发送方发送TCP报文时，把当前的时间值放入时间戳字段，接收方收到后发送确认报文时，把这个时间戳字段的值复制到确认报文中，当发送方收到确认报文后即可计算出RTT。也可以用来防止回绕序号PAWS，也可以说可以用来区分相同序列号的不同报文。因为序列号用32为表示，每2^32个序列号就会产生回绕，那么使用时间戳字段就很容易区分相同序列号的不同报文

TCP协议PORT

传输层通过port号，确定应用层协议  
Port number:  
tcp：传输控制协议，面向连接的协议；通信前需要建立虚拟链路；结束后拆除链路0-65535
udp：User Datagram Protocol，无连接的协议 0-65535
IANA:互联网数字分配机构（负责域名，数字资源，协议分配）  
0-1023：系统端口或特权端口(仅管理员可用) ，众所周知，永久的分配给固定的系统应用使用，22/tcp(ssh), 80/tcp(http), 443/tcp(https)    
1024-49151：用户端口或注册端口，但要求并不严格，分配给程序注册为某应用使用，1433/tcp(SqlServer), 1521/tcp(oracle),3306/tcp(mysql),11211/tcp/udp
(memcached)  
49152-65535：动态端口或私有端口，客户端程序随机使用的端口  
其范围的定义：        /proc/sys/net/ipv4/ip_local_port_range  

有限状态机FSM:Finite State Machine

CLOSED 没有任何连接状态  
LISTEN 侦听状态，等待来自远方TCP端口的连接请求  
SYN-SENT 在发送连接请求后，等待对方确认  
SYN-RECEIVED 在收到和发送一个连接请求后，等待对方确认  
ESTABLISHED 代表传输连接建立，双方进入数据传送状态  
FIN-WAIT-1 主动关闭,主机已发送关闭连接请求，等待对方确认  
FIN-WAIT-2 主动关闭,主机已收到对方关闭传输连接确认，等待对方发送关闭传输连接请求  
TIME-WAIT 完成双向传输连接关闭，等待所有分组消失  
CLOSE-WAIT 被动关闭,收到对方发来的关闭连接请求，并已确认  
LAST-ACK 被动关闭,等待最后一个关闭传输连接确认，并等待所有分组消失  
CLOSING 双方同时尝试关闭传输连接，等待对方确认  
客户端先发送一个FIN给服务端，自己进入了FIN_WAIT_1状态，这时等待接收服务端的报文，该报文会有三种可能：  
只有服务端的ACK  
只有服务端的FIN  
基于服务端的ACK，又有FIN  
1、只收到服务器的ACK，客户端会进入FIN_WAIT_2状态，后续当收到服务端的FIN时，回应发送一个ACK，会进入到TIME_WAIT状态，这个状态会持续2MSL(TCP报文段在网络中的最大生存时间, RFC 1122标准的建议值是2min).客户端等待2MSL，是为了当最后一个ACK丢失时，可以再发送一次。因为服务端在等待超时后会再发送一个FIN给客户端，进而客户端知道ACK已丢失  
2、只有服务端的FIN时，回应一个ACK给服务端，进入CLOSING状态，然后接  
收到服务端的ACK时，进入TIME_WAIT状态
3、同时收到服务端的ACK和FIN，直接进入TIME_WAIT状态  

客户端的典型状态转移

客户端通过connect系统调用主动与服务器建立连接connect系统调用首先给服务器发送一个同步报文段，使连接转移到SYN_SENT状态  
此后connect系统调用可能因为如下两个原因失败返回：  
1、如果connect连接的目标端口不存在（未被任何进程监听），或者该端口仍被处于TIME_WAIT状态的连接所占用（见后文），则服务器将给客户端发送一个复位报文段，connect调用失败。  
2、如果目标端口存在，但connect在超时时间内未收到服务器的确认报文段，则connect调用失败。  
connect调用失败将使连接立即返回到初始的CLOSED状态。如果客户端成功收到服务器的同步报文段和确认，则connect调用成功返回，连接转移至ESTABLISHED状态客户端的典型状态转移  
当客户端执行主动关闭时，它将向服务器发送一个结束报文段，同时连接进入FIN_WAIT_1状态。若此时客户端收到服务器专门用于确认目的的确认报文段，则连接转移至FIN_WAIT_2状态。当客户端处于FIN_WAIT_2状态时，服务器处于CLOSE_WAIT状态，这一对状态是可能发生半关闭的状态。此时如果服务器也关闭连接（发送结束报文段），则客户端将给予确认并进入TIME_WAIT状态  
客户端从FIN_WAIT_1状态可能直接进入TIME_WAIT状态（不经过FIN_WAIT_2状态），前提是处于FIN_WAIT_1状态的服务器直接收到带确认信息的结束报文段（而不是先收到确认报文段，再收到结束报文段）   
处于FIN_WAIT_2状态的客户端需要等待服务器发送结束报文段，才能转移至TIME_WAIT状态，否则它将一直停留在这个状态。如果不是为了在半关闭状态下继续接收数据，连接长时间地停留在FIN_WAIT_2状态并无益处。连接停留在
FIN_WAIT_2状态的情况可能发生在：客户端执行半关闭后，未等服务器关闭连接就强行退出了。此时客户端连接由内核来接管，可称之为孤儿连接（和孤儿进程类似）  
Linux为了防止孤儿连接长时间存留在内核中，定义了两个内核参数：  
/proc/sys/net/ipv4/tcp_max_orphans 指定内核能接管的孤儿连接数目  
/proc/sys/net/ipv4/tcp_fin_timeout 指定孤儿连接在内核中生存的时间  

TCP超时重传

异常网络状况下（开始出现超时或丢包），TCP控制数据传输以保证其承诺的可靠服务  
TCP服务必须能够重传超时时间内未收到确认的TCP报文段。为此，TCP模块为每个TCP报文段都维护一个重传定时器，该定时器在TCP报文段第一次被发送时启动。如果超时时间内未收到接收方的应答，TCP模块将重传TCP报文段并重置定时器。至于下次重传的超时时间如何选择，以及最多执行多少次重传，就是TCP的重传策略  
与TCP超时重传相关的两个内核参数：  
/proc/sys/net/ipv4/tcp_retries1，指定在底层IP接管之前TCP最少执行的重传次数，默认值是3  
/proc/sys/net/ipv4/tcp_retries2，指定连接放弃前TCP最多可以执行的重传次数，默认值15（一般对应13～30min）  

拥塞控制

网络中的带宽、交换结点中的缓存和处理机等，都是网络的资源。在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可承受的能力，网络的性能就会变坏。此情况称为拥塞  
TCP为提高网络利用率，降低丢包率，并保证网络资源对每条数据流的公平性。即所谓的拥塞控制  
TCP拥塞控制的标准文档是RFC 5681，其中详细介绍了拥塞控制的四个部分：慢启动（slow start）、拥塞避免（congestion avoidance）、快速重传（fastretransmit）和快速恢复（fast recovery）。拥塞控制算法在Linux下有多种实现，比如reno算法、vegas算法和cubic算法等。它们或者部分或者全部实现了上述四个部分  
当前所使用的拥塞控制算法  
/proc/sys/net/ipv4/tcp_congestion_control  

## UDP
udp的特性

工作在传输层  
提供不可靠的网络访问  
非面向连接协议  
有限的错误检查  
传输性能高  
无数据恢复特性  


## Internet 协议
Internet 协议特征  

运行于 OSI 网络层  
面向无连接的协议  
独立处理数据包  
分层编址  
尽力而为传输  
无数据恢复功能   

IP PDU 报头

 版本:占4位,指 IP 协议的版本目前的IP协议版本号为4  
首部长度:占4位,可表示的最大数值是15个单位，一个单位为4字节，因此IP 的首部长度的最大值是60字节  
区分服务:占8位,用来获得更好的服务,在旧标准中叫做服务类型,但实际上一直未
被使用过.后改名为区分服务.只有在使用区分服务(DiffServ)时,这个字段才起作
用.一般的情况下不使用  
总长度:占16位,指首部和数据之和的长度,单位为字  节,因此数据报的最大长度为
65535 字节.总长度必须不超过最大传送单元 MTU
标识:占16位,它是一个计数器,通常，每发送一个报文，该值会加1， 也用于数
据包分片，在同一个包的若干分片中，该值是相同的  
标志(flag):占3位,目前只有后两位有意义  
DF： Don’t Fragment 中间的一位，只有当 DF=0 时才允许分片  
MF： More Fragment 最后一位，MF=1表示后面还有分片,MF=0 表示最后
一个分片  
片偏移:占12位,指较长的分组在分片后，该分片在原分组中的相对位置.片偏移
以8个字节为偏移单位  
生存时间:占8位,记为TTL (Time To Live) 数据报在网络中可通过的路由器数的
最大值,TTL 字段是由发送端初始设置一个 8 bit字段.推荐的初始值由分配数字
RFC 指定,当前值为 64.发送 ICMP 回显应答时经常把 TTL 设为最大值 255   
协议:占8位,指出此数据报携带的数据使用何种协议以便目的主机的IP层将数据
部分上交给哪个处理过程, 1表示为 ICMP 协议, 2表示为 IGMP 协议, 6表示为
TCP 协议, 17表示为 UDP 协议  
首部检验和:占16位,只检验数据报的首部不检验数据部分.这里不采用 CRC 检验
码而采用简单的计算方法  
源地址和目的地址:都各占4字节,分别记录源地址和目的地址  


## IP地址 

IP地址

它们可唯一标识 IP 网络中的每台设备  
每台主机（计算机、网络设备、外围设备）必须具有唯一的地址  
IP地址由两部分组成  
• 网络ID：  
• 标识网络  
• 每个网段分配一个网络ID  
• 主机 ID：  
• 标识单个主机  
• 由组织分配给各设备  

IP地址分类

A类：  

0 000 0000 - 0 111 1111: 1-127  
网络数：126, 127  
每个网络中的主机数：2^24-2  
默认子网掩码：255.0.0.0  
私网地址：10.0.0.0   
1-126

B类：  

10 00 0000 - 10 11 1111：128-191  
网络数：2^14  
每个网络中的主机数：2^16-2  
默认子网掩码：255.255.0.0  
私网地址：172.16.0.0-172.31.0.0  
128-191

C类： 

110 0 0000 - 110 1 1111: 192-223  
网络数：2^21  
每个网络中的主机数：2^8-2  
默认子网掩码：255.255.255.0  
私网地址：192.168.0.0-192.168.255.0  
192-223

D类：组播

1110 0000 - 1110 1111: 224-239  
224-239

E类：保留未使用  
240-255   

>无类域间路由CIDR:网络id位数不确定,22    
>netmask子网掩码:32bit 二进制,对应于网络ID位为1，对应于主机ID位为0 

10.0.0.100/19    255.255.224.0   

203.110.200.199/22    
1 主机数?1022  
2 netmask?255.255.252.0  
3 网络ID值?  
 
203.110.200.199  

203.110.110010 00.199  
255.255.111111 00.00000000   
203.110.110010 00.0/22  
203.110.200.0/22  

192.168.34.6  
255.255.255.0  
192.168.34.0/24  


0与1=0  
0与0=0  
1与0=0  
1与1=1  

A 192.168.1.100   
  255.255.255.0  
 

B 192.168.2.100   
  255.255.0.0  
 

A 172.18.0.100 255.0.0.0  172.18.0.0/16  
B 172.18.0.123 255.255.255.0 172.18.0.0/24  


100.123.199.124/20  
1 主机数  2^12-2  
2 子网掩码 255.255.240.0   
3 网络ID:100.123.192.0/20  
4 最小和最大IP:100.123.192.1 --- 100.123.207.254  

100.123.11000111.124  
255.255.240.0   
100.123.1100 0000.1   
100.123.1100 1111.254   

123.200.233.100/23    
123.200.235.100/23    




100.123.1100  0000.000000001  
100.123.1100  1111.111111110  

00000000  0  
10000000  128  
11000000  192  
11100000  224  
11110000  240  
11111000  248  
11111100  252  
11111110  254   
11111111  255   

00000001   
00000010  
00000100  
00001000  
00010000  
00100000  
01000000  
10000000   

10.0.0.1--10.255.255.254    
10.00 000000.0.0   
 
10.00 000000.0.0 10.0.0.0/10  
10.01 000000.0.0 10.64.0.0/10  
10.10 000000.0.0 10.128.0.0/10  
10.11 000000.0.0 10.192.0.0/10  

10.0 0000000.0.0 10.0.0.0/9   
10.1 0000000.0.0 10.128.0.0/9  
 
10.0.0.0/8 给32省份划分各自子网  
借5位  
1 子网子网掩码 255.248.0.0   
2 最小子网，最大子网的网络ID  
10.00000  000.0.0  10.0.0.0/13  
10.11111  000.0.0  10.248.0.0/13  
3 每个子网主机数？2^19-2  
4 第20个子网分给河南使用，最小IP10.152.0.1，最大IP范围10.159.255.254  

10.10011  000.0.1          
10.10011  111.255.254     

公式：  
1一个网络中主机最大数=2^主机ID位数(32-网络ID位数)-2=2^(32-网络ID位数)-2  
2网络数=2^可变网络ID位  
3CIDR表示法：IP/网络ID位数  
4网络ID值=IP与子网掩码  
5划分子网：一个大网划分成多个小网，网络ID位变多，主机ID位才变少，网络ID向主机ID借位N,分成2^N个小网  
6合并超网：多个小网合并成一个大网，主机ID向网络ID借位  
 
河南省10.152.0.0/13 给15个地市，划分各自子网 2^N>=15 N=4  
1 子网子网掩码  17 255.255.128.0  
2 最小子网，最大子网的网络ID  

10.10011  000.0  0000000.0 10.152.0.0/17  
10.10011  111.1  0000000.0 10.159.128.0/17  

3 每个子网主机数？ 2^(32-17)-2    
4 最大子网的最小IP，最大IP范围 10.159.128.1-10.159.255.254  

10.10011  111.1  0000000.0  
10.10011  111.1  0000000.1  10.159.128.1  
10.10011  111.1  1111111.254 10.159.255.254  

 河南省10.152.0.0/13 给87个区县，划分各自子网   
1 子网子网掩码    
2 最小子网，最大子网的网络ID  
3 每个子网主机数？  
4 最大子网的最小IP，最大IP范围   


220.78.10101 000.0  
220.78.10101 001.0  
 

220.78.10101 111.0   

220.78.168.0/21  

>E类：1111 xxxx.x.x.x，即240～254，E类地址保留，仅作为Internet的实验和开发之用。

>因255.x.x.x是全网广播地址。

>表示主机的二进制位全0或全1不能使用，全0表示本网，全1表示本网广播

特殊地址

0.0.0.0  
0.0.0.0不是一个真正意义上的IP地址。它表示所有不清楚的主机和目的网络  
255.255.255.255  
限制广播地址。对本机来说，这个地址指本网段内(同一广播域)的所有主机  
127.0.0.1～127.255.255.254  
本机回环地址，主要用于测试。在传输介质上永远不应该出现目的地址为"127.0.0.1”的 数据包  
224.0.0.0到239.255.255.255  
组播地址，224.0.0.1特指所有主机，224.0.0.2特指所有路由器。224.0.0.5指OSPF路由器，地址多用于一些特定的程序以及多媒体程序  
169.254.x.x  
如果Windows主机使用了DHCP自动分配IP地址，而又无法从DHCP服务器获取地址，系统会为主机分配这样地址  



公共ip地址

A:
 1.0.0.0到9.255.255.255  
 11.0.0.0到126.255.255.255

B:
 128.0.0.0-172.15.155.155  
 172.32.0.0-191.255.255.255

C:
 192.0.0.0-192.167.255.255
 192.169.0.0-223.255.255.255

私有ip地址

A:10.0.0.0-10.255.255.255  
B:172.16.0.0-172.31.255.255  
C:192.168.0.0-192.168.255.255  


## 跨网络通信

跨网络通信：路由  
路由分类：  
主机路由  
网络路由  
默认路由：0.0.0.0/0  
优先级：精度越高，优先级越高  
主机路由优先于网络路由  

路由表：

目标网络ID：目标IP所在网络ID    
接口：本设备要发送数据包到目标，从哪个接口发送出来，才能到达  
网关：到达目标网络，需要将数据交给下一个路口哪个接口的对应的IP  


基本网络配置

将Linux主机接入到网络，需要配置网络相关设置。  
一般包括如下内容：  
主机名  
IP/netmask  
路由：默认网关 
DNS服务器 
主DNS服务器  
次DNS服务器  
第三DNS服务器  

CentOS 6网卡名称

接口命名方式：CentOS 6  
以太网：eth[0,1,2,...]  
ppp：ppp[0,1,2,...]  
网络接口识别并命名相关的udev配置文件：可以改网卡名vim  ...  
/etc/udev/rules.d/70-persistent-net.rules  
[root@CentOS6 ~]#cat /etc/udev/rules.d/70-persistent-net.rules 

    This file was automatically generated by the /lib/udev/write_net_rules
    program, run by the persistent-net-generator.rules rules file.
    #
    You can modify it, as long as you keep each rule on a single
    line, and change only the value of the NAME= key.

     PCI device 0x8086:0x100f (e1000)
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="00:0c:29:17:6b:d8", ATTR{type}=="1", KERNEL=="eth*", NAME="eth0"

查看网卡：  
dmesg |grep –i eth  
ethtool -i eth0  
卸载网卡驱动：  
modprobe -r e1000  
rmmod e1000  
装载网卡驱动：  
modprobe e1000  

网络配置方式  

静态指定:  
ifconfig, route, netstat  
ip: object {link, addr, route}, ss, tc  
system-config-network-tui，setup  

配置文件

动态分配：  
DHCP: Dynamic Host Configuration Protocol  
配置网络接口
ifconfig命令 
ifconfig [interface]  
ifconfig -a  
ifconfig IFACE [up|down]  

        ifconfig eth1 down 禁用网卡  up启用
ifconfig interface [aftype] options | address ...  

    ifconfig eth1 172.16.0.66/24 改ip地址
ifconfig IFACE IP/netmask [up]  
ifconfig IFACE IP netmask NETMASK  

    ifconfig eth1 172.1+6.0.6 netmask 255.255.0.0  
注意：立即生效  
启用混杂模式：[-]promisc  

route命令

路由管理命令  
查看：route -n  
添加：route add  
route add [-net|-host] target [netmask Nm] [gw Gw] [[dev] If]  

    route add -host 2.2.2.2 gw 172.18.0.200 dev eth1

目标：192.168.1.3 网关：172.16.0.1  
route add -host 192.168.1.3 gw 172.16.0.1 dev eth0  
目标：192.168.0.0 网关：172.16.0.1  
route add -net 192.168.0.0 netmask 255.255.255.0 gw 172.16.0.1 dev eth0  
route add -net 192.168.0.0/24 gw 172.16.0.1 dev eth0  

默认路由，网关：172.16.0.1  

    route add -net 0.0.0.0 netmask 0.0.0.0 gw 172.16.0.1  
    route add default gw 172.16.0.1  
删除：route del  

    [root@CentOS6 ~]#route del -host 2.2.2.2 gw 172.18.0.200

route del [-net|-host] target [gw Gw] [netmask Nm] [[dev] If]  
目标：192.168.1.3 网关：172.16.0.1  
route del -host 192.168.1.3  
目标：192.168.0.0 网关：172.16.0.1  
route del -net 192.168.0.0 netmask 255.255.255.0  

配置动态路由

通过守护进程获取动态路由  
• 安装quagga包  
yum install quagga  
• 支持多种路由协议：RIP、OSPF和BGP  
• 命令vtysh配置  

## netstat命令

显示网络连接：  
netstat [--tcp|-t] [--udp|-u] [--raw|-w]   [--listening|-l] [--all|-a] [--numeric|-n]   [--extend|-e[--extend|-e]] [--program|-p]  
-t: tcp协议相关  
-u: udp协议相关  
-w: raw socket相关  
-l: 处于监听状态  
-a: 所有状态  
-n: 以数字显示IP和端口  
-e：扩展格式  
-p: 显示相关进程及PID  

    [root@CentOS7 ~]#netstat -ntul
    Active Internet connections (only servers)
    Proto Recv-Q Send-Q Local Address           Foreign Address         State      
    tcp        0      0 0.0.0.0:58979           0.0.0.0:*               LISTEN     
    tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN     
    tcp        0      0 192.168.122.1:53        0.0.0.0:*               LISTEN     
    tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN     
    tcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN 

常用组合：  
-tan, -uan, -tnl, -unl  
显示路由表 ：  
netstat {--route|-r} [--numeric|-n]  
-r: 显示内核路由表  
-n: 数字格式  
显示接口统计数据：  
netstat {--interfaces|-I|-i} [iface] [--all|-a]   [--extend|-e] [--program|-p]
[--numeric|-n]  
netstat -i  
netstat –I=IFACE  
ifconfig -s eth0  

    [root@CentOS7 ~]#netstat -Ieth0
    Kernel Interface table
    Iface      MTU    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg
    eth0: error fetching interface information: Device not found


## ip命令

配置Linux网络属性：ip命令  
ip - show / manipulate routing, devices, policy routing and tunnels  
ip [ OPTIONS ] OBJECT { COMMAND | help }  
OBJECT := { link | addr | route }  
ip link - network device configuration  (数据链路层)
set dev IFACE  
可设置属性：  
up and down：激活或禁用指定接口  
ifup/ifdown
show [dev IFACE]：指定接口  
[up]：仅显示处于激活状态的接口  

ip addr { add | del } IFADDR dev STRING  
[label LABEL]：添加地址时指明网卡别名  
[scope {global|link|host}]：指明作用域  
global: 全局可用  
link: 仅链接可用  
host: 本机可用  
[broadcast ADDRESS]：指明广播地址  
 ip address show - look at protocol addresses （清除eth1的ip） 
[dev DEVICE]  
[label PATTERN]  
[primary and secondary]  
 ip address flush - 使用格式同show  
    ip addr add 172.16.100.100/16 dev eth0 label eth0:0  （加ip地址）
    ip addr del 172.16.100.100/16 dev eth0 label eth0:0  （删除ip地址）
    ip addr flush dev eth0 label eth0:0  

 ip route - routing table management  
添加路由：ip route add  
ip route add TARGET via GW dev IFACE src   

    ip route  
    IP route （查找上一条命令出来的IP地址）

SOURCE_IP  
TARGET:    
主机路由：IP  
网络路由：NETWORK/MASK   
ip route add 192.168.0.0/24 via 172.16.0.1  
ip route add 192.168.1.13 via 172.16.0.1  
添加网关：ip route add default via GW dev IFACE  
ip route add default via 172.16.0.1  
删除路由：ip route del TARGET  
显示路由：ip route show|list  
清空路由表：ip route flush [dev IFACE]  [via PREFIX]  
ip route flush dev eth0  


## ss命令
格式：ss [OPTION]... [FILTER]  
netstat通过遍历proc来获取socket信息，ss使用netlink与内核tcp_diag模块通信获取  
socket信息。  
 选项：  
-t: tcp协议相关  
-u: udp协议相关  
-w: 裸套接字相关  
-x：unix sock相关  
-l: listen状态的连接  
-a: 所有  
-n: 数字格式  
-p: 相关的程序及PID  
-e: 扩展的信息  
-m：内存用量  
-o：计时器信息  

 FILTER : [ state TCP-STATE ] [ EXPRESSION ]  
 TCP的常见状态：   
tcp finite state machine:  
LISTEN: 监听  
ESTABLISHED：已建立 的连接  
FIN_WAIT_1  
FIN_WAIT_2  
SYN_SENT  
SYN_RECV  
CLOSED  
 EXPRESSION:  
dport =  
sport =  
示例：’( dport = :ssh or sport = :ssh )’  
 常用组合：  
-tan, -tanl, -tanlp, -uan  
常见用法  
ss -l 显示本地打开的所有端口  
ss -pl 显示每个进程具体打开的socket  
ss -t -a 显示所有tcp socket  
ss -u -a 显示所有的UDP Socekt  
ss -o state established '( dport = :ssh or sport = :ssh )' 显示所有已建立的  
ssh连接  
ss -o state established '( dport = :http or sport = :http )' 显示所有已建立  
的HTTP连接  
ss -s 列出当前socket详细信息  



